# from django.shortcuts import render
# from rest_framework.response import Response
# from rest_framework.decorators import api_view
# from rest_framework import status

# Create your views here.

def get_texts_scores(fname):
    # 튜토리얼에서 이용하는 `fname` 파일은 영화평과 평점이 \t 으로 구분된 two column tsv 파일입니다.
    # 예시는 이 cell 의 output 을 참고하세요.
    with open(fname, encoding='utf-8') as f:
        docs = [doc.lower().replace('\n','').split('\t') for doc in f]
        docs = [doc for doc in docs if len(doc) == 2]

        texts, scores = zip(*docs)
        return list(texts)
        


import sys
sys.path.append('../')
from krwordrank.word import KRWordRank
from krwordrank.hangle import normalize
import krwordrank

# La La Land
fname = './data/134963_norm.txt'
texts = get_texts_scores(fname)

wordrank_extractor = KRWordRank(
    min_count = 5, # 단어의 최소 출현 빈도수 (그래프 생성 시)
    max_length = 10, # 단어의 최대 길이
    verbose = True
    )
# print(wordrank_extractor, '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')
beta = 0.85    # PageRank의 decaying factor beta
max_iter = 10

keywords, rank, graph = wordrank_extractor.extract(texts, beta, max_iter)

# for word, r in sorted(keywords.items(), key=lambda x:x[1], reverse=True)[:30]:
#     # print('%8s:\t%.4f' % (word, r))
#     pass

top_keywords = []
fnames = ['./data/A Werewolf Boy.txt',
          './data/Aladdin.txt',
          './data/Avatar2022.txt']

    
for fname in fnames:
    
    texts = get_texts_scores(fname)
    # , scores
    
    wordrank_extractor = KRWordRank(
        min_count=5, max_length=10, verbose=False)
    
    keywords, rank, graph = wordrank_extractor.extract(
        texts, beta, max_iter)
    
    top_keywords.append(
        sorted(keywords.items(),
               key=lambda x:x[1],
               reverse=True)[:100]
    )
# print(top_keywords)

keyword_counter = {}
for keywords in top_keywords:
    words, ranks = zip(*keywords)
    for word in words:
        keyword_counter[word] = keyword_counter.get(word, 0) + 1
        
# print(keyword_counter)

common_keywords = {word for word, count in keyword_counter.items() if count == 3}
len(common_keywords)
# print('common_keywords:', common_keywords)
str(common_keywords)

selected_top_keywords = []
for keywords in top_keywords:
    selected_keywords = []
    for word, r in keywords:
        if word in common_keywords:
            continue
        selected_keywords.append((word, r))
    selected_top_keywords.append(selected_keywords)
######
# print(selected_top_keywords)
def get_from_list(l, i, default=('', 0)):
    if len(l) <= i:
        return default
    else:
        return l[i]
print(selected_top_keywords)
for k in range(100 - len(common_keywords) ):
    
    message = '  --  '.join(
        '%8s (%.3f)' % get_from_list(selected_top_keywords, k))
    
    print(message)
    